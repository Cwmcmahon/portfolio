[
  {
    "objectID": "posts/bart/bart.html",
    "href": "posts/bart/bart.html",
    "title": "Bart Ridership",
    "section": "",
    "text": "Peek behind the curtain!\n# Reading in the CSV file with average yearly entries for the 5 most frequented stations in 2022\nentries_coord &lt;- read.csv(\"./entries_coord.csv\")\n\n# Reading in the KML file with BART station info, and altering it to match the above\nstations &lt;- st_read(\"./doc.kml\") |&gt; \n  mutate(Name = str_replace(Name, \"St\", \"Street\"),\n         Name = case_when(Name == \"19th Street/Oakland\" ~ \"19th Street Oakland\",\n                          Name == \"12th Street/Oakland City Center\" ~ \"12th Street Oakland City Center\",\n                          Name == \"16th Street/Mission\" ~ \"16th Street Mission\",\n                          Name == \"24th Street/Mission\" ~ \"24th Street Mission\",\n                          TRUE ~ Name)) |&gt;\n  filter(Name != \"Coliseum/Airport Connector\" \n         & Name != \"eBART Transfer\" \n         & !(Name %in% entries_coord$origin)\n)\n\n# Reading in CSV file with route info\nroutes &lt;- read.csv(\"./routes.csv\")\n\n# Creating an SF object from the route data\nsetDT(routes)\nsf &lt;- routes[\n  , {\n    geometry &lt;- st_linestring(x = matrix(c(orig_lng, orig_lat, dest_lng, dest_lat), \n                                         ncol = 2, \n                                         byrow = T))\n    geometry &lt;- st_sfc(geometry)\n    geometry &lt;- st_sf(geometry = geometry)\n  }\n  , by = idx\n]\nsf &lt;- st_as_sf(sf) |&gt; cbind(route = routes$route, \n                            origin = routes$origin, \n                            destination = routes$destination)\n\n# Setting map info\nmyLAT &lt;- 37.799087467604025\nmyLNG &lt;- -122.35496898239143\nmyZOOM &lt;- 12\nmyTILES &lt;- \"CartoDB.Positron\"\n\n# Specifying the color palette for Leaflet\npal &lt;- colorFactor(c(\"#CC79A7\", \"#D55E00\", \"#E69F00\", \"#009E73\", \"#0072B2\"), \n                   domain = entries_coord$origin |&gt; \n                     unique())\n\n# Making the shared data for crosstalk\nshared_entries &lt;- SharedData$new(entries_coord, ~id)\n\n\nI made this interactive graphic as a demonstration of my ability to use the R package Crosstalk. Crosstalk allows for data to be shared between multiple plots, so when the data are filtered by user input, all of the plots update without needing a server running in the background. This page is static!\nThe ridership and geospatial data used to make this graphic came from BART. If you click on the text that says “Peek behind the curtain!” above, you’ll find the code that I used to prepare the data for this graphic. Clicking on the same text below will show you the code that generates this graphic from the processed data.\n\n\nPeek behind the curtain!\nbscols(widths = c(2, NA, NA),\n       list(filter_checkbox(\"routes\", \"Select From the 5 Most Frequented Origin Stations\", shared_entries, ~origin)),\n       plot_ly(shared_entries, \n               x = ~year, \n               y = ~total_riders, \n               color = ~origin, \n               colors = c(\"#CC79A7\", \"#D55E00\", \"#E69F00\", \"#009E73\", \"#0072B2\"), \n               name = ~origin, \n               type = \"scatter\", \n               mode = \"line\",\n               width=\"100%\", \n               height=750) |&gt;\n         layout(xaxis = list(title = 'Year'),\n                yaxis = list(title = 'Total Number of Entering Riders')),\n       leaflet(shared_entries, \n               width=\"100%\", \n               height=750) |&gt; \n         addProviderTiles(myTILES) |&gt;\n         setView(myLNG,\n                 myLAT, \n                 zoom = myZOOM) |&gt;\n         addPolylines(data = sf, \n                      color = \"#1A1A1A\") |&gt;\n         addCircleMarkers(data = stations, \n                          label = ~Name, \n                          color = \"#1A1A1A\", \n                          fillOpacity = 0.7) |&gt;\n         addCircleMarkers(label = ~origin, \n                          color = ~pal(origin),\n                          fillOpacity = 0.5)\n)\n\n\n\n\n\n\nSelect From the 5 Most Frequented Origin Stations\n\n\n\n\n16th Street Mission\n\n\n\n\n\nCivic Center/UN Plaza\n\n\n\n\n\nEmbarcadero\n\n\n\n\n\nMontgomery Street\n\n\n\n\n\nPowell Street\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\nCheng, Joe, Barret Schloerke, Bhaskar Karambelkar, and Yihui Xie. 2023. Leaflet: Create Interactive Web Maps with the JavaScript Leaflet Library. https://rstudio.github.io/leaflet/.\n\n\nCheng, Joe, and Carson Sievert. 2021. Crosstalk: Inter-Widget Interactivity for HTML Widgets. https://rstudio.github.io/crosstalk/.\n\n\nDowle, Matt, and Arun Srinivasan. 2023. Data.table: Extension of ‘Data.frame‘. https://r-datatable.com.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2011. “Dates and Times Made Easy with lubridate.” Journal of Statistical Software 40 (3): 1–25. https://www.jstatsoft.org/v40/i03/.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://tibble.tidyverse.org/.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\n———. 2023. Sf: Simple Features for r. https://r-spatial.github.io/sf/.\n\n\nPebesma, Edzer, and Roger Bivand. 2023. Spatial Data Science: With applications in R. Chapman and Hall/CRC. https://doi.org/10.1201/9780429459016.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSievert, Carson, Chris Parmer, Toby Hocking, Scott Chamberlain, Karthik Ram, Marianne Corvellec, and Pedro Despouy. 2023. Plotly: Create Interactive Web Graphics via Plotly.js. https://plotly-r.com.\n\n\nSpinu, Vitalie, Garrett Grolemund, and Hadley Wickham. 2023. Lubridate: Make Dealing with Dates a Little Easier. https://lubridate.tidyverse.org.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2022. Stringr: Simple, Consistent Wrappers for Common String Operations. https://stringr.tidyverse.org.\n\n\n———. 2023a. Forcats: Tools for Working with Categorical Variables (Factors). https://forcats.tidyverse.org/.\n\n\n———. 2023b. Tidyverse: Easily Install and Load the Tidyverse. https://tidyverse.tidyverse.org.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. Readxl: Read Excel Files. https://readxl.tidyverse.org.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2023. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://dplyr.tidyverse.org.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://purrr.tidyverse.org/.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2023. Readr: Read Rectangular Text Data. https://readr.tidyverse.org.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2023. Tidyr: Tidy Messy Data. https://tidyr.tidyverse.org."
  },
  {
    "objectID": "posts/coming_soon/in_progress.html",
    "href": "posts/coming_soon/in_progress.html",
    "title": "Projects in Progress",
    "section": "",
    "text": "I just added this page, but I’ll be updating it with some of my in-progress projects shortly!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "I am a recent graduate from Willamette University’s MS in Data Science program, and before that I graduated from Willamette’s College of Arts and Sciences with a BA in History. Through my MSDS program I have become proficient with tools including PostgreSQL, R, and Python. Some specific packages I have used in my work are ggplot2, tidymodels, shiny, leaflet, plotly, and flexdashboard on the R side, and numpy, pandas, scikit-learn, matplotlib, and seaborn in Python. Additionally, my background in history helps me bring a unique perspective, good research questions, and solid writing skills to my data science projects.\nI am looking for a job at the moment, so if you are a potential employer interested in hiring me please reach out to me at my gmail address: carterwmcmahon. If you do, I’d be happy to tell you which one of the three statements from above is a lie!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Some of my work, always in progress",
    "section": "",
    "text": "Bart Ridership\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBee Populations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlesh and Blood TCG\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProjects in Progress\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/bees/bees.html",
    "href": "posts/bees/bees.html",
    "title": "Bee Populations",
    "section": "",
    "text": "This app uses data from the 2022 Week 2 Tidy Tuesday event. It was built in collaboration with Karyn Brehmeyer.\n\n\nPeek behind the curtain!\ncolony &lt;- read_csv('colony.csv')\nstressor &lt;- read_csv('stressor.csv')\n\n# Colony\nmonths &lt;- unique(colony$months)\nquarters &lt;- c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\nm_to_q &lt;- setNames(quarters, months)\n\ncolony_qtrs &lt;- colony |&gt; \n  mutate(year = factor(year), \n         months = factor(months), \n         state = factor(state), \n         quarter = factor(str_replace_all(months, m_to_q)))\n\ncolony_qtrs %&lt;&gt;% mutate(year_qtr = factor(paste(\"y\", year, quarter, sep = \"_\")))\n\n# Stressor\nstressor_qtrs &lt;- stressor |&gt; \n  mutate(year = factor(year), \n         months = factor(months), \n         state = factor(state), \n         quarter = factor(str_replace_all(months, m_to_q)))\n\nstressor_qtrs %&lt;&gt;% mutate(year_qtr = factor(paste(\"y\", year, quarter, sep = \"_\")))\n\nstressor_qtrs$stressor %&lt;&gt;% gsub(pattern = \"Disesases\", replacement = \"Diseases\")\n\nstressors_spread &lt;- spread(data = stressor_qtrs, \n                           key = stressor, \n                           value = stress_pct)\n\n# Joining them!\nbees_join &lt;- inner_join(colony_qtrs, stressors_spread) |&gt; \n  filter(state != \"United States\")\n\n# Filtering for Q1\nq1_annually = bees_join |&gt; \n  filter(quarter == \"Q1\", state != \"Other States\")\n\n# Prepping for app usage\nyears &lt;- c(2015:2022)\n\nstate_diffs_all &lt;- data.frame(year1 = character(), \n                              year2 = character(), \n                              state = character(), \n                              perc_diff = double())\n\nf.bees_diff &lt;- function(year1, year2) {\n  y1 &lt;- q1_annually |&gt; \n    filter(year == year1)\n  y2 &lt;- q1_annually |&gt; \n    filter(year == year2)\n  f_diff &lt;- inner_join(y1, y2, by = c(\"state\")) |&gt;\n    mutate(diff = colony_n.y - colony_n.x) |&gt; \n    mutate(perc_diff = diff / colony_n.x) |&gt; \n    select(year.x, \n           year.y, \n           state, \n           perc_diff) |&gt; \n    mutate(year1 = year.x,\n           year2 = year.y,\n           .keep = \"unused\")\n  return(state_diffs_all |&gt; \n           add_row(year1 = f_diff$year1, \n                   year2 = f_diff$year2, \n                   state = f_diff$state, \n                   perc_diff = f_diff$perc_diff))\n}\n\nfor (n in c(1:7)){\n  for (x in c((n + 1) : 8)){\n    state_diffs_all &lt;- f.bees_diff(years[[n]], years[[x]])\n  }\n}\n\nstate_diffs_all$year1 %&lt;&gt;% factor()\n\nstate_diffs_all$year2 %&lt;&gt;% factor()\n\nstate_diffs_all$state %&lt;&gt;% factor()\n\nstate_diffs_all %&lt;&gt;% mutate(color = ifelse(state == \"Oregon\", \"gold\", \"gray50\"))\n\n# Define UI \nui &lt;- fluidPage(\n  \n  # Application title\n  titlePanel(\"Changes in number of bee colonies by state\"),\n  \n  # Sidebar with a slider input the year \n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"year\",\n                  h3(\"Select a range:\"),\n                  min = 2015,\n                  max = 2022,\n                  value = c(2015,2016),\n                  step = 1,\n                  sep = \"\",\n                  ticks = FALSE)\n    ),\n    \n    # Show a plot \n    mainPanel(\n      plotlyOutput(\"bee_plot\")\n    )\n  )\n)\n\n# Define server \nserver &lt;- function(input, output) {\n  \n  output$bee_plot &lt;- renderPlotly({\n    # Generate plot based on input$year from ui.R\n    p &lt;-state_diffs_all |&gt;\n      filter(year1 == input$year[[1]] \n             & year2 == input$year[[2]]) |&gt;\n      ggplot(aes(x = perc_diff, \n                 y = reorder(state, perc_diff), \n                 fill = color)) +\n        geom_col(width = 0.75) +\n        scale_fill_manual(values = c(\"gold\" = \"#F3C622\", \"gray50\" = \"#3A3637\")) +\n        scale_y_discrete(drop = TRUE, \n                         na.translate = FALSE) +\n        scale_x_continuous(labels = scales::percent_format(accuracy = 1)) +\n        labs(x=\"Percent difference\", \n             y = \"State\",\n             title = paste(\"Percent difference in number of bee colonies \\nbetween Q1\", input$year[[1]], \"and\", input$year[[2]])) + \n        theme_minimal() +\n        theme(plot.margin = unit(c(15,3,3,3), \"pt\"), \n              legend.position = \"none\")\n    \n    ggplotly(p, height = 600, tooltip = c(\"x\"))\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\nReferences\n\nBache, Stefan Milton, and Hadley Wickham. 2022. Magrittr: A Forward-Pipe Operator for r. https://magrittr.tidyverse.org.\n\n\nChang, Winston, Joe Cheng, JJ Allaire, Carson Sievert, Barret Schloerke, Yihui Xie, Jeff Allen, Jonathan McPherson, Alan Dipert, and Barbara Borges. 2023. Shiny: Web Application Framework for r. https://shiny.posit.co/.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2011. “Dates and Times Made Easy with lubridate.” Journal of Statistical Software 40 (3): 1–25. https://www.jstatsoft.org/v40/i03/.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://tibble.tidyverse.org/.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSievert, Carson, Chris Parmer, Toby Hocking, Scott Chamberlain, Karthik Ram, Marianne Corvellec, and Pedro Despouy. 2023. Plotly: Create Interactive Web Graphics via Plotly.js. https://plotly-r.com.\n\n\nSpinu, Vitalie, Garrett Grolemund, and Hadley Wickham. 2023. Lubridate: Make Dealing with Dates a Little Easier. https://lubridate.tidyverse.org.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2022. Stringr: Simple, Consistent Wrappers for Common String Operations. https://stringr.tidyverse.org.\n\n\n———. 2023a. Forcats: Tools for Working with Categorical Variables (Factors). https://forcats.tidyverse.org/.\n\n\n———. 2023b. Tidyverse: Easily Install and Load the Tidyverse. https://tidyverse.tidyverse.org.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2023. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://dplyr.tidyverse.org.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://purrr.tidyverse.org/.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2023. Readr: Read Rectangular Text Data. https://readr.tidyverse.org.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2023. Tidyr: Tidy Messy Data. https://tidyr.tidyverse.org."
  },
  {
    "objectID": "posts/fabtcg/fabtcg.html",
    "href": "posts/fabtcg/fabtcg.html",
    "title": "Flesh and Blood TCG",
    "section": "",
    "text": "I made this poster for my Data Engineering course, and it is meant to showcase some simple analysis made possible by a database that I had created using PostgreSQL. The entity relationship diagram at the bottom of the poster outlines the structure of that database, which stored data about cards from a trading card game called Flesh and Blood. I designed the database in a way that demonstrated my understanding of joins as well as primary and foreign keys."
  }
]