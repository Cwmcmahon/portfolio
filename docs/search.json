[
  {
    "objectID": "posts/food/food.html",
    "href": "posts/food/food.html",
    "title": "Environmental Impact of Foods",
    "section": "",
    "text": "This table shows the amount of emissions per kg of food produced for a variety of food products.\n\n\nPeek behind the curtain!\nfood_data &lt;- read_csv('Food_Product_Emissions.csv') %&gt;%\n  rename(`Total Global Average` = `Total Global Average GHG Emissions per kg`) %&gt;%\n  rename(`Food Product` = `Food product`) %&gt;%\n  select(-`Unit of GHG Emissions`)\n\nfood_table &lt;- food_data %&gt;% \n  arrange(desc(`Total from Land to Retail`)) %&gt;%\n  gt() %&gt;%\n  tab_header(title = \"Greenhouse Gas Emissions by Food Product\",\n             subtitle = \"Measured in kg of CO2 equivalents per kg of food produced\") %&gt;%\n  tab_source_note(source_note = \"Source: AmandaRoseKnudsen on Kaggle - https://www.kaggle.com/datasets/amandaroseknudsen/foodproductemissions\") %&gt;%\n  opt_stylize(style = 6) %&gt;%\n  data_color(columns = `Total from Land to Retail`, \n             fn = col_quantile(palette = c(\"Reds\"),\n                                   domain = NULL,\n                                   n = 3),\n             alpha = 0.75) %&gt;%\n  cols_move(columns = `Total from Land to Retail`, after = `Food Product`) %&gt;%\n  cols_align(align = \"center\") %&gt;%\n  cols_hide(`Total Global Average`)\n\nfood_table\n\n\n\n\n\n\n  \n    \n      Greenhouse Gas Emissions by Food Product\n    \n    \n      Measured in kg of CO2 equivalents per kg of food produced\n    \n    \n      Food Product\n      Total from Land to Retail\n      Land Use Change\n      Feed\n      Farm\n      Processing\n      Transport\n      Packaging\n      Retail\n    \n  \n  \n    Beef (beef herd)\n59.570\n16.278\n1.878\n39.388\n1.269\n0.346\n0.247\n0.164\n    Lamb & Mutton\n24.415\n0.468\n2.370\n19.508\n1.111\n0.490\n0.251\n0.217\n    Cheese\n21.240\n4.455\n2.346\n13.059\n0.738\n0.138\n0.172\n0.332\n    Beef (dairy herd)\n21.085\n0.906\n2.508\n15.689\n1.108\n0.424\n0.268\n0.182\n    Dark Chocolate\n18.681\n14.308\n0.000\n3.706\n0.185\n0.061\n0.400\n0.021\n    Coffee\n16.477\n3.688\n0.000\n10.386\n0.592\n0.130\n1.630\n0.051\n    Shrimps (farmed)\n11.854\n0.206\n2.510\n8.379\n0.000\n0.206\n0.334\n0.219\n    Palm Oil\n7.605\n3.096\n0.000\n2.107\n1.264\n0.208\n0.886\n0.044\n    Pig Meat\n7.282\n1.535\n2.940\n1.694\n0.284\n0.343\n0.296\n0.190\n    Soybean Oil\n6.117\n3.096\n0.000\n1.519\n0.311\n0.299\n0.849\n0.043\n    Poultry Meat\n6.092\n2.540\n1.775\n0.672\n0.440\n0.276\n0.212\n0.177\n    Olive Oil\n5.944\n-0.377\n0.000\n4.272\n0.660\n0.482\n0.861\n0.046\n    Fish (farmed)\n5.183\n0.534\n0.819\n3.598\n0.020\n0.111\n0.061\n0.040\n    Eggs\n4.507\n0.709\n2.200\n1.317\n0.000\n0.084\n0.161\n0.036\n    Rice\n3.839\n-0.022\n0.000\n3.553\n0.065\n0.096\n0.084\n0.063\n    Rapeseed Oil\n3.828\n0.212\n0.000\n2.343\n0.193\n0.190\n0.844\n0.046\n    Sunflower Oil\n3.607\n0.133\n0.000\n2.148\n0.229\n0.201\n0.853\n0.043\n    Tofu\n2.871\n0.958\n0.000\n0.495\n0.794\n0.177\n0.177\n0.270\n    Milk\n2.781\n0.495\n0.236\n1.458\n0.149\n0.090\n0.097\n0.256\n    Cane Sugar\n2.672\n1.247\n0.000\n0.485\n0.037\n0.784\n0.083\n0.036\n    Groundnuts\n2.497\n0.439\n0.000\n1.425\n0.372\n0.120\n0.099\n0.042\n    Other Pulses\n1.610\n0.033\n0.000\n1.089\n0.000\n0.096\n0.353\n0.039\n    Wine\n1.585\n-0.061\n0.000\n0.626\n0.139\n0.093\n0.749\n0.039\n    Oatmeal\n1.575\n0.001\n0.000\n1.370\n0.042\n0.067\n0.066\n0.029\n    Beet Sugar\n1.536\n0.000\n0.000\n0.536\n0.242\n0.629\n0.090\n0.039\n    Wheat & Rye\n1.441\n0.100\n0.000\n0.847\n0.217\n0.129\n0.090\n0.058\n    Tomatoes\n1.427\n0.372\n0.000\n0.704\n0.012\n0.177\n0.145\n0.017\n    Berries & Grapes\n1.214\n0.025\n0.000\n0.722\n0.000\n0.238\n0.212\n0.017\n    Barley\n1.109\n0.009\n0.000\n0.176\n0.128\n0.035\n0.497\n0.264\n    Maize\n0.988\n0.315\n0.000\n0.475\n0.052\n0.060\n0.060\n0.026\n    Cassava\n0.987\n0.589\n0.000\n0.220\n0.000\n0.094\n0.045\n0.039\n    Soymilk\n0.914\n0.180\n0.000\n0.093\n0.163\n0.110\n0.098\n0.270\n    Peas\n0.896\n0.000\n0.000\n0.717\n0.000\n0.095\n0.045\n0.039\n    Other Fruit\n0.750\n0.126\n0.000\n0.369\n0.015\n0.182\n0.042\n0.016\n    Bananas\n0.678\n-0.025\n0.000\n0.266\n0.059\n0.292\n0.065\n0.021\n    Other Vegetables\n0.455\n0.001\n0.000\n0.174\n0.060\n0.164\n0.041\n0.015\n    Brassicas\n0.437\n0.002\n0.000\n0.278\n0.000\n0.095\n0.045\n0.017\n    Onions & Leeks\n0.395\n0.005\n0.000\n0.211\n0.000\n0.095\n0.045\n0.039\n    Potatoes\n0.370\n-0.001\n0.000\n0.193\n0.000\n0.094\n0.045\n0.039\n    Root Vegetables\n0.365\n0.013\n0.000\n0.154\n0.000\n0.114\n0.045\n0.039\n    Apples\n0.357\n-0.029\n0.000\n0.225\n0.004\n0.096\n0.044\n0.017\n    Citrus Fruit\n0.317\n-0.146\n0.000\n0.307\n0.000\n0.094\n0.045\n0.017\n    Nuts\n0.278\n-2.052\n0.000\n2.126\n0.032\n0.067\n0.078\n0.027\n  \n  \n    \n      Source: AmandaRoseKnudsen on Kaggle - https://www.kaggle.com/datasets/amandaroseknudsen/foodproductemissions\n    \n  \n  \n\n\n\n\n\n\n\n\nReferences\n\nBache, Stefan Milton, and Hadley Wickham. 2022. Magrittr: A Forward-Pipe Operator for r. https://CRAN.R-project.org/package=magrittr.\n\n\nfile., See AUTHORS. 2022. Paletteer: Comprehensive Collection of Color Palettes. https://github.com/EmilHvitfeldt/paletteer.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2011. “Dates and Times Made Easy with lubridate.” Journal of Statistical Software 40 (3): 1–25. https://www.jstatsoft.org/v40/i03/.\n\n\nIannone, Richard, Joe Cheng, Barret Schloerke, Ellis Hughes, Alexandra Lauer, and JooYoung Seo. 2023. Gt: Easily Create Presentation-Ready Display Tables. https://CRAN.R-project.org/package=gt.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nSpinu, Vitalie, Garrett Grolemund, and Hadley Wickham. 2023. Lubridate: Make Dealing with Dates a Little Easier. https://CRAN.R-project.org/package=lubridate.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2022. Stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\n———. 2023a. Forcats: Tools for Working with Categorical Variables (Factors). https://CRAN.R-project.org/package=forcats.\n\n\n———. 2023b. Tidyverse: Easily Install and Load the Tidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2023. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2023. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, and Dana Seidel. 2022. Scales: Scale Functions for Visualization. https://CRAN.R-project.org/package=scales.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2023. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr."
  },
  {
    "objectID": "posts/travel_emissions/travel_emissions.html",
    "href": "posts/travel_emissions/travel_emissions.html",
    "title": "UK Travel Emissions",
    "section": "",
    "text": "This graphic was made using data from the UK Department for Business, Energy & Industrial Strategy, which I accessed through Our World in Data.\n\n\nPeek behind the curtain!\nemissions_data &lt;- read_csv(\"./travel_emissions.csv\")\n\nemissions_gg &lt;- emissions_data %&gt;%\n  filter(!grepl(\"\\\\d\", mode) &\n         !grepl(\"\\\\+\", mode)) %&gt;%\n  ggplot(aes(x = emissions, \n             y = reorder(mode, emissions),\n             fill = category)) +\n    geom_col_interactive(aes(tooltip = paste(\"Emissions:\", emissions, sep = \" \"),\n                             data_id = mode),\n                         hover_nearest = TRUE) +\n    scale_fill_manual(name = \"Category\",\n                      values = c(\"Air\" = \"#E69F00\",\n                                  \"Rail\" = \"#009E73\",\n                                  \"Road\" = \"#CC79A7\",\n                                  \"Water\" = \"#0072B2\")) +\n    theme_minimal() +\n    labs(x = \"Emissions (in grams of CO2 equivalents per passenger km)\", \n         y = \"Mode of transport\", \n         title = \"Emissions for Modes of Transport in the UK\") +\n    theme(panel.grid.major.y = element_blank())\n\ngirafe(ggobj = emissions_gg,\n       options = list(\n         opts_hover(css = \"fill:gray\")\n         )\n)\n\n\n\n\n\n\n\n\n\n\nReferences\n\nBache, Stefan Milton, and Hadley Wickham. 2022. Magrittr: A Forward-Pipe Operator for r. https://CRAN.R-project.org/package=magrittr.\n\n\nGohel, David, and Panagiotis Skintzos. 2023. Ggiraph: Make Ggplot2 Graphics Interactive. https://davidgohel.github.io/ggiraph/.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2011. “Dates and Times Made Easy with lubridate.” Journal of Statistical Software 40 (3): 1–25. https://www.jstatsoft.org/v40/i03/.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nSpinu, Vitalie, Garrett Grolemund, and Hadley Wickham. 2023. Lubridate: Make Dealing with Dates a Little Easier. https://CRAN.R-project.org/package=lubridate.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2022. Stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\n———. 2023a. Forcats: Tools for Working with Categorical Variables (Factors). https://CRAN.R-project.org/package=forcats.\n\n\n———. 2023b. Tidyverse: Easily Install and Load the Tidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2023. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2023. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2023. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr."
  },
  {
    "objectID": "posts/fabtcg/fabtcg.html",
    "href": "posts/fabtcg/fabtcg.html",
    "title": "Flesh and Blood TCG",
    "section": "",
    "text": "This is a poster I made for a Data Engineering course. The database I constructed for the project is outlined in an Entity Relationship Diagram at the bottom of the poster."
  },
  {
    "objectID": "posts/bees/bees.html",
    "href": "posts/bees/bees.html",
    "title": "Bee Populations",
    "section": "",
    "text": "This app uses data from the 2022 Week 2 Tidy Tuesday event. It was built in collaboration with Karyn Brehmeyer.\n\n\nPeek behind the curtain!\ncolony = read_csv('colony.csv')\nstressor = read_csv('stressor.csv')\n\n# Colony\nmonths = unique(colony$months)\nquarters = c(\"Q1\", \"Q2\", \"Q3\", \"Q4\")\nm_to_q = setNames(quarters, months)\n\ncolony_qtrs = colony %&gt;% mutate(year = factor(year), months = factor(months), state = factor(state), quarter = factor(str_replace_all(months, m_to_q)))\n\ncolony_qtrs %&lt;&gt;% mutate(year_qtr = factor(paste(\"y\", year, quarter, sep = \"_\")))\n\n# Stressor\nstressor_qtrs = stressor %&gt;% mutate(year = factor(year), months = factor(months), state = factor(state), quarter = factor(str_replace_all(months, m_to_q)))\n\nstressor_qtrs %&lt;&gt;% mutate(year_qtr = factor(paste(\"y\", year, quarter, sep = \"_\")))\n\nstressor_qtrs$stressor %&lt;&gt;% gsub(pattern = \"Disesases\", replacement = \"Diseases\")\n\nstressors_spread = spread(data = stressor_qtrs, key = stressor, value = stress_pct)\n\n# Joining them!\nbees_join = inner_join(colony_qtrs, stressors_spread)\n\nbees_join %&lt;&gt;% filter(state != \"United States\")\n\n# Filtering for Q1\nq1_annually = bees_join %&gt;% filter(quarter == \"Q1\", state != \"Other States\")\n\n# Prepping for app usage\nyears = c(2015:2022)\n\nstate_diffs_all &lt;- data.frame(year1 = character(), year2 = character(), state = character(), perc_diff = double())\n\nf.bees_diff_3 = function(year1, year2) {\n  y1 = q1_annually %&gt;% filter(year == year1)\n  y2 = q1_annually %&gt;% filter(year == year2)\n  f_diff = inner_join(y1, y2, by = c(\"state\"))\n  f_diff %&lt;&gt;% mutate(diff = colony_n.y - colony_n.x)\n  f_diff %&lt;&gt;% mutate(perc_diff = diff / colony_n.x)\n  f_diff %&lt;&gt;% select(year.x, year.y, state, perc_diff)\n  f_diff %&lt;&gt;% mutate(year1 = year.x, year2 = year.y, year.x = NULL, year.y = NULL)\n  return(state_diffs_all %&gt;% add_row(year1 = f_diff$year1, year2 = f_diff$year2, state = f_diff$state, perc_diff = f_diff$perc_diff))\n}\n\nfor (n in c(1:7)){\n  for (x in c((n + 1) : 8)){\n    state_diffs_all &lt;- f.bees_diff_3(years[[n]], years[[x]])\n  }\n}\n\nstate_diffs_all$year1 %&lt;&gt;% factor()\n\nstate_diffs_all$year2 %&lt;&gt;% factor()\n\nstate_diffs_all$state %&lt;&gt;% factor()\n\nstate_diffs_all %&lt;&gt;% mutate(color = ifelse(state == \"Oregon\", \"gold\", \"gray50\"))\n\n# Define UI \nui &lt;- fluidPage(\n  \n  # Application title\n  titlePanel(\"Changes in number of bee colonies by state\"),\n  \n  # Sidebar with a slider input the year \n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"year\",\n                  h3(\"Select a range:\"),\n                  min = 2015,\n                  max = 2022,\n                  value = c(2015,2016),\n                  step = 1,\n                  sep = \"\",\n                  ticks = FALSE)\n    ),\n    \n    # Show a plot \n    mainPanel(\n      plotlyOutput(\"bee_plot\")\n    )\n  )\n)\n\n# Define server \nserver &lt;- function(input, output) {\n  \n  output$bee_plot &lt;- renderPlotly({\n    # generate plot based on input$year from ui.R\n    p&lt;-state_diffs_all%&gt;%\n      filter(year1 == input$year[[1]] & year2 == input$year[[2]])%&gt;%\n      ggplot(aes(x = perc_diff, y = reorder(state, perc_diff), fill = color)) +\n        geom_col(width = 0.75) +\n        scale_fill_manual(values = c(\"gold\" = \"#F3C622\", \"gray50\" = \"#3A3637\")) +\n        scale_y_discrete(drop = TRUE, na.translate = FALSE) +\n        scale_x_continuous(labels = scales::percent_format(accuracy = 1)) +\n        labs(x=\"Percent difference\", y = \"State\",\n             title = paste(\"Percent difference in number of bee colonies \\nbetween Q1\", input$year[[1]], \"and\", input$year[[2]])) + \n        theme_minimal() +\n        theme(plot.margin = unit(c(15,3,3,3), \"pt\"), legend.position = \"none\")\n    \n    ggplotly(p, height = 600, tooltip = c(\"x\"))\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\nReferences\n\nBache, Stefan Milton, and Hadley Wickham. 2022. Magrittr: A Forward-Pipe Operator for r. https://CRAN.R-project.org/package=magrittr.\n\n\nChang, Winston, Joe Cheng, JJ Allaire, Carson Sievert, Barret Schloerke, Yihui Xie, Jeff Allen, Jonathan McPherson, Alan Dipert, and Barbara Borges. 2023. Shiny: Web Application Framework for r. https://shiny.posit.co/.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2011. “Dates and Times Made Easy with lubridate.” Journal of Statistical Software 40 (3): 1–25. https://www.jstatsoft.org/v40/i03/.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSievert, Carson, Chris Parmer, Toby Hocking, Scott Chamberlain, Karthik Ram, Marianne Corvellec, and Pedro Despouy. 2023. Plotly: Create Interactive Web Graphics via Plotly.js. https://CRAN.R-project.org/package=plotly.\n\n\nSpinu, Vitalie, Garrett Grolemund, and Hadley Wickham. 2023. Lubridate: Make Dealing with Dates a Little Easier. https://CRAN.R-project.org/package=lubridate.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2022. Stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\n———. 2023a. Forcats: Tools for Working with Categorical Variables (Factors). https://CRAN.R-project.org/package=forcats.\n\n\n———. 2023b. Tidyverse: Easily Install and Load the Tidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2023. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2023. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2023. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "I am a recent graduate from Willamette University’s MS in Data Science program, and before that I graduated from Willamette’s College of Arts and Sciences with a BA in History. Through my MSDS program I have become proficient with tools including PostgreSQL, R, and Python. Some specific packages I have used in my work are the ggplot2, tidymodels, shiny, leaflet, plotly, and flexdashboard on the R side, and numpy, pandas, scikit-learn, matplotlib, and seaborn in Python. Additionally, my background in history helps me bring a unique perspective, good research questions, and solid writing skills to my data science projects. \nFor some more fun info about me, here are two truths and one lie:\n\nI am a 2nd degree black belt in Taekwondo\nMy second favorite movie is Parasite (2019)\nI shook President Jimmy Carter’s hand\n\nI am looking for a job at the moment, so if you are a potential employer interested in hiring me please reach out to me at my gmail address: carterwmcmahon. If you do, I’d be happy to tell you which one of the three statements from above is a lie!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Some of my work, always in progress",
    "section": "",
    "text": "Bart Ridership\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBee Populations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnvironmental Impact of Foods\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlesh and Blood TCG\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPopularity of Steam Games\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPortfolio Presentation in Reveal.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTransit Infrastracture Costs per KM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUK Travel Emissions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/steam/steam.html",
    "href": "posts/steam/steam.html",
    "title": "Popularity of Steam Games",
    "section": "",
    "text": "This interactive table uses data from the 2021 Week 12 Tidy Tuesday event.\n\n\nPeek behind the curtain!\ngames &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-16/games.csv') %&gt;%\n  select(-avg_peak_perc) %&gt;%\n  mutate(year = factor(year), month = factor(month, levels = month.name)) %&gt;%\n  group_by(year) %&gt;%\n  top_n(1000)\n\ngames %&gt;% \n  select(`Game` = gamename, \n         `Year` = year,\n         `Month` = month, \n         `Average Player Count` = avg, \n         `Peak Player Count` = peak) %&gt;%\n  datatable(filter = \"top\", extensions = 'Buttons', \n            options = list(\n              dom = 'Bfrtip',\n              pageLength = 10,\n              lengthMenu = c(10, 20, 50),\n              buttons = c('copy', 'csv', 'excel'),\n              order = (list(list(2, 'desc'), list(3, 'desc'), list(4, 'desc'),  list(1, 'asc')))\n              )\n            )\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\nBache, Stefan Milton, and Hadley Wickham. 2022. Magrittr: A Forward-Pipe Operator for r. https://CRAN.R-project.org/package=magrittr.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2011. “Dates and Times Made Easy with lubridate.” Journal of Statistical Software 40 (3): 1–25. https://www.jstatsoft.org/v40/i03/.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nSpinu, Vitalie, Garrett Grolemund, and Hadley Wickham. 2023. Lubridate: Make Dealing with Dates a Little Easier. https://CRAN.R-project.org/package=lubridate.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2022. Stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\n———. 2023a. Forcats: Tools for Working with Categorical Variables (Factors). https://CRAN.R-project.org/package=forcats.\n\n\n———. 2023b. Tidyverse: Easily Install and Load the Tidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2023. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2023. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2023. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nXie, Yihui, Joe Cheng, and Xianying Tan. 2023. DT: A Wrapper of the JavaScript Library DataTables. https://github.com/rstudio/DT."
  },
  {
    "objectID": "posts/slides/slides.html",
    "href": "posts/slides/slides.html",
    "title": "Portfolio Presentation in Reveal.js",
    "section": "",
    "text": "This is a presentation with some of the contents from this portfolio. It was made using Quarto Markdown and Reveal.js"
  },
  {
    "objectID": "posts/bart/bart.html",
    "href": "posts/bart/bart.html",
    "title": "Bart Ridership",
    "section": "",
    "text": "Peek behind the curtain!\n# Reading in the CSV file with average yearly entries for the 5 most frequented stations in 2022\nentries_coord &lt;- read.csv(\"./entries_coord.csv\")\n\n# Reading in the KML file with BART station info, and altering it to match the above\nstations &lt;- st_read(\"./doc.kml\") %&gt;% \n  mutate(Name = str_replace(Name, \"St\", \"Street\"),\n         Name = case_when(Name == \"19th Street/Oakland\" ~ \"19th Street Oakland\",\n                          Name == \"12th Street/Oakland City Center\" ~ \"12th Street Oakland City Center\",\n                          Name == \"16th Street/Mission\" ~ \"16th Street Mission\",\n                          Name == \"24th Street/Mission\" ~ \"24th Street Mission\",\n                          TRUE ~ Name)) %&gt;%\n  filter(Name != \"Coliseum/Airport Connector\" & \n           Name != \"eBART Transfer\" &\n           !(Name %in% entries_coord$origin)\n)\n\n# Reading in CSV file with route info\nroutes &lt;- read.csv(\"./routes.csv\")\n\n# Creating an SF object from the route data\nsetDT(routes)\nsf &lt;- routes[\n  , {\n    geometry &lt;- st_linestring(x = matrix(c(orig_lng, orig_lat, dest_lng, dest_lat), ncol = 2, byrow = T))\n    geometry &lt;- st_sfc(geometry)\n    geometry &lt;- st_sf(geometry = geometry)\n  }\n  , by = idx\n]\nsf &lt;- st_as_sf(sf) %&gt;% cbind(route = routes$route, origin = routes$origin, destination = routes$destination)\n\n# Setting map info\nmyLAT &lt;- 37.799087467604025\nmyLNG &lt;- -122.35496898239143\nmyZOOM &lt;- 12\nmyTILES &lt;- \"CartoDB.Positron\"\n\n# Specifying the color palette for Leaflet\npal &lt;- colorFactor(c(\"#CC79A7\", \"#D55E00\", \"#E69F00\", \"#009E73\", \"#0072B2\"), \n                   domain = entries_coord$origin %&gt;% unique())\n\n# Making the shared data for crosstalk\nshared_entries &lt;- SharedData$new(entries_coord, ~id)\n\n\nAbove, you’ll find the setup code for the interactive graphic on this page. Below, you’ll see the graphic and my code for making it. This graphic uses ridership and geospatial data from BART.\n\n\nPeek behind the curtain!\nbscols(widths = c(2, NA, NA),\n       list(filter_checkbox(\"routes\", \"Select From the 5 Most Frequented Origin Stations\", shared_entries, ~origin)),\n        plot_ly(shared_entries, \n                x = ~year, y = ~total_riders, \n                color = ~origin, colors = c(\"#CC79A7\", \"#D55E00\", \"#E69F00\", \"#009E73\", \"#0072B2\"), \n                name = ~origin, \n                type = \"scatter\", mode = \"line\",\n                width=\"100%\", height=750) %&gt;%\n         layout(xaxis = list(title = 'Year'),\n                yaxis = list(title = 'Total Number of Entering Riders')),\n       leaflet(shared_entries, width=\"100%\", height=750) %&gt;% \n         addProviderTiles(myTILES) %&gt;%\n         setView(myLNG, myLAT, zoom = myZOOM) %&gt;%\n         addPolylines(data = sf, color = \"#1A1A1A\") %&gt;%\n         addCircleMarkers(data = stations, label = ~Name, color = \"#1A1A1A\", fillOpacity = 0.7) %&gt;%\n         addCircleMarkers(label = ~origin, color = ~pal(origin), fillOpacity = 0.5)\n)\n\n\n\n\n\n\nSelect From the 5 Most Frequented Origin Stations\n\n\n\n\n16th Street Mission\n\n\n\n\n\nCivic Center/UN Plaza\n\n\n\n\n\nEmbarcadero\n\n\n\n\n\nMontgomery Street\n\n\n\n\n\nPowell Street\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferences\n\nBache, Stefan Milton, and Hadley Wickham. 2022. Magrittr: A Forward-Pipe Operator for r. https://CRAN.R-project.org/package=magrittr.\n\n\nCheng, Joe, Bhaskar Karambelkar, and Yihui Xie. 2023. Leaflet: Create Interactive Web Maps with the JavaScript Leaflet Library. https://rstudio.github.io/leaflet/.\n\n\nCheng, Joe, and Carson Sievert. 2021. Crosstalk: Inter-Widget Interactivity for HTML Widgets. https://rstudio.github.io/crosstalk/.\n\n\nDowle, Matt, and Arun Srinivasan. 2023. Data.table: Extension of ‘Data.frame‘. https://CRAN.R-project.org/package=data.table.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2011. “Dates and Times Made Easy with lubridate.” Journal of Statistical Software 40 (3): 1–25. https://www.jstatsoft.org/v40/i03/.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\n———. 2023. Sf: Simple Features for r. https://CRAN.R-project.org/package=sf.\n\n\nPebesma, Edzer, and Roger Bivand. 2023. Spatial Data Science: With applications in R. Chapman and Hall/CRC. https://doi.org/10.1201/9780429459016.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nSievert, Carson, Chris Parmer, Toby Hocking, Scott Chamberlain, Karthik Ram, Marianne Corvellec, and Pedro Despouy. 2023. Plotly: Create Interactive Web Graphics via Plotly.js. https://CRAN.R-project.org/package=plotly.\n\n\nSpinu, Vitalie, Garrett Grolemund, and Hadley Wickham. 2023. Lubridate: Make Dealing with Dates a Little Easier. https://CRAN.R-project.org/package=lubridate.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2022. Stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\n———. 2023a. Forcats: Tools for Working with Categorical Variables (Factors). https://CRAN.R-project.org/package=forcats.\n\n\n———. 2023b. Tidyverse: Easily Install and Load the Tidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. Readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2023. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2023. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2023. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr."
  },
  {
    "objectID": "posts/transit_costs/transit_costs.html",
    "href": "posts/transit_costs/transit_costs.html",
    "title": "Transit Infrastracture Costs per KM",
    "section": "",
    "text": "This app uses data from the 2021 Week 2 Tidy Tuesday event. It builds on the work of GitHub users jsakaluk and javendano58.\n\n\nPeek behind the curtain!\nload(file = \"transit_data.RData\")\ntransit_cost$cost_km_millions &lt;- as.numeric(transit_cost$cost_km_millions)\n\n# Make g20 summary tibble by...\ntransit_grouped &lt;- transit_cost %&gt;%\n  group_by(country) %&gt;% # grouping by country\n  summarise(avg_cost = mean(cost_km_millions)) %&gt;% # calculate mean\n  mutate(grp = case_when(country == \"AU\" ~ \"g20\", # categorize g20 nations\n                         country == \"CA\" ~ \"g20\",\n                         country == \"SA\" ~ \"g20\",\n                         country == \"US\" ~ \"g20\",\n                         country == \"IN\" ~ \"g20\",\n                         country == \"RU\" ~ \"g20\",\n                         country == \"TR\" ~ \"g20\",\n                         country == \"AR\" ~ \"g20\",\n                         country == \"BR\" ~ \"g20\",\n                         country == \"MX\" ~ \"g20\",\n                         country == \"FR\" ~ \"g20\",\n                         country == \"DE\" ~ \"g20\",\n                         country == \"IT\" ~ \"g20\",\n                         country == \"UK\" ~ \"g20\",\n                         country == \"CN\" ~ \"g20\",\n                         country == \"ID\" ~ \"g20\",\n                         country == \"JP\" ~ \"g20\",\n                         country == \"KR\" ~ \"g20\"),\n         country = fct_reorder(country, avg_cost), # sort countries by cost\n         code = tolower(country), # need lower case to match country flag icons\n         code = ifelse(code == \"uk\", \"gb\", code), # recode uk to gb for flag\n         country_name = countrycode(country, \n                                    origin = 'iso2c', destination = 'cldr.short.en', \n                                    nomatch = NULL),\n         region = countrycode(country, \n                              origin = 'iso2c', destination = 'un.region.name', \n                              nomatch = NULL)) %&gt;%\n  drop_na(country, avg_cost)\n\ngrouped_mean &lt;- transit_grouped %&gt;% # calculate g20 average\n  summarise(mean_avg = mean(avg_cost))\n\n# Define UI\nui &lt;- fillPage(\n\n    # Application title\n    titlePanel(\"Compare per KM Costs of Transit Infrastructure Across Countries\"),\n\n    # Selectize input for countries\n      fillRow(\n          selectizeInput(\n            'countries',\n            'Select one or more countries to compare',\n            transit_grouped$country_name,\n            selected = (transit_grouped %&gt;% filter(grp == \"g20\"))$country_name,\n            multiple = TRUE,\n            width = \"100%\"\n          ),\n          plotOutput(\"distPlot\", height = \"80%\"),\n          flex = c(2,6),\n          height = \"100%\"\n      ),\n    padding = 20\n)\n\n# Define server logic\nserver &lt;- function(input, output) {\n    \n    output$distPlot &lt;- renderPlot({\n      transit_grouped %&gt;%\n        filter(country_name %in% input$countries) %&gt;%\n        ggplot(aes(x = avg_cost, y = reorder(country_name, avg_cost))) +\n        geom_bar(stat = \"identity\") + \n        geom_flag(x = -1, aes(country = code), size = case_when(-length(input$countries) + 25 &gt;= 18 ~ 18,\n                                                                -length(input$countries) + 25 &lt;= 5 ~ 5,\n                                                                TRUE ~ -length(input$countries) + 25))+\n        geom_vline(data = transit_grouped %&gt;% \n                     filter(country_name %in% input$countries) %&gt;%\n                     summarize(mean = mean(avg_cost)), \n                   mapping = aes(xintercept = mean), linetype = \"dashed\")+\n        cowplot::theme_minimal_vgrid(16) +\n        theme(\n          axis.title.y = element_blank(),\n          legend.position = \"none\",\n          axis.title.x = element_text(size = 20),\n          axis.text.x = element_text(size = 16),\n          plot.caption = element_text(size = 12)\n        )+\n        labs(caption = \"Data Source: Transit Costs Project (https://transitcosts.com)\",\n             x = \"Average Cost of Transit Projects per KM (in millions of USD)\")\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\nReferences\n\nArel-Bundock, Vincent. 2023. Countrycode: Convert Country Names and Country Codes. https://vincentarelbundock.github.io/countrycode/.\n\n\nArel-Bundock, Vincent, Nils Enevoldsen, and CJ Yetman. 2018. “Countrycode: An r Package to Convert Country Names and Country Codes.” Journal of Open Source Software 3 (28): 848. https://doi.org/10.21105/joss.00848.\n\n\nChang, Winston, Joe Cheng, JJ Allaire, Carson Sievert, Barret Schloerke, Yihui Xie, Jeff Allen, Jonathan McPherson, Alan Dipert, and Barbara Borges. 2023. Shiny: Web Application Framework for r. https://shiny.posit.co/.\n\n\nGrolemund, Garrett, and Hadley Wickham. 2011. “Dates and Times Made Easy with lubridate.” Journal of Statistical Software 40 (3): 1–25. https://www.jstatsoft.org/v40/i03/.\n\n\nHughes, Ellis. 2022. tidytuesdayR: Access the Weekly TidyTuesday Project Dataset. https://github.com/thebioengineer/tidytuesdayR.\n\n\nMüller, Kirill, and Hadley Wickham. 2023. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nSpinu, Vitalie, Garrett Grolemund, and Hadley Wickham. 2023. Lubridate: Make Dealing with Dates a Little Easier. https://CRAN.R-project.org/package=lubridate.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2022. Stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\n———. 2023a. Forcats: Tools for Working with Categorical Variables (Factors). https://CRAN.R-project.org/package=forcats.\n\n\n———. 2023b. Tidyverse: Easily Install and Load the Tidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2023. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2023. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2023. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr.\n\n\nWilke, Claus O. 2020. Cowplot: Streamlined Plot Theme and Plot Annotations for Ggplot2. https://wilkelab.org/cowplot/."
  }
]